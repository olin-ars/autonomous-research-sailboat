// Generated by gencpp from file oars_pkg/ObjFrame.msg
// DO NOT EDIT!


#ifndef OARS_PKG_MESSAGE_OBJFRAME_H
#define OARS_PKG_MESSAGE_OBJFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace oars_pkg
{
template <class ContainerAllocator>
struct ObjFrame_
{
  typedef ObjFrame_<ContainerAllocator> Type;

  ObjFrame_()
    : name()
    , left()
    , right()
    , top()
    , bottom()  {
    }
  ObjFrame_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , left(_alloc)
    , right(_alloc)
    , top(_alloc)
    , bottom(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _name_type;
  _name_type name;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_type;
  _left_type left;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_type;
  _right_type right;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _top_type;
  _top_type top;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _bottom_type;
  _bottom_type bottom;





  typedef boost::shared_ptr< ::oars_pkg::ObjFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oars_pkg::ObjFrame_<ContainerAllocator> const> ConstPtr;

}; // struct ObjFrame_

typedef ::oars_pkg::ObjFrame_<std::allocator<void> > ObjFrame;

typedef boost::shared_ptr< ::oars_pkg::ObjFrame > ObjFramePtr;
typedef boost::shared_ptr< ::oars_pkg::ObjFrame const> ObjFrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::oars_pkg::ObjFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::oars_pkg::ObjFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace oars_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'oars_pkg': ['/home/shashank/volumes/autonomous-research-sailboat/oars_ws/src/oars_pkg/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::oars_pkg::ObjFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::oars_pkg::ObjFrame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oars_pkg::ObjFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oars_pkg::ObjFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oars_pkg::ObjFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oars_pkg::ObjFrame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::oars_pkg::ObjFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87318109dd924e4711aff92aa4479132";
  }

  static const char* value(const ::oars_pkg::ObjFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87318109dd924e47ULL;
  static const uint64_t static_value2 = 0x11aff92aa4479132ULL;
};

template<class ContainerAllocator>
struct DataType< ::oars_pkg::ObjFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "oars_pkg/ObjFrame";
  }

  static const char* value(const ::oars_pkg::ObjFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::oars_pkg::ObjFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String name\n\
std_msgs/Float32 left\n\
std_msgs/Float32 right\n\
std_msgs/Float32 top\n\
std_msgs/Float32 bottom\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
";
  }

  static const char* value(const ::oars_pkg::ObjFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::oars_pkg::ObjFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.top);
      stream.next(m.bottom);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oars_pkg::ObjFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::oars_pkg::ObjFrame_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "left: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right);
    s << indent << "top: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.top);
    s << indent << "bottom: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.bottom);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OARS_PKG_MESSAGE_OBJFRAME_H
